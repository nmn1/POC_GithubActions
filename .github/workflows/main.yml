name: GitHub Action Workflow
on: 
  push:
    branches: [ main ]
    tags:
      - "v*.*.*"
env:
  # DOCKER_USER: naman01
  # IMAGE_NAME: poc_git_actions

  AWS_REGION: us-east-1                   # set this to your preferred AWS region,
  ECS_SERVICE: gameAppService                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_DEV_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: gameApp  

jobs:
  liniting:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Lint Action
        uses: wearerequired/lint-action@v2.3.0
      # - name: Super-Linter
      #   uses: github/super-linter@v4.10.1

  SAST:
    runs-on: ubuntu-latest
    steps:
    - name: sast steps
      run: echo "steps for sast"

  DOCKER_BUILD:
    runs-on: ubuntu-latest
    needs: [SAST, liniting ]
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        if: github.ref_type == 'tag'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: naman01/poc_git_actions
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push
        id: image-push
        uses: docker/build-push-action@v4  
        with:
          context: .
          flavor: latest
          outputs: type=docker,dest=/tmp/docker.tar
          push: ${{ github.ref_type == 'tag' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: " Docker Artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: docker
          path: /tmp/docker.tar
  
  DEPLOYMENT-On-ECS:
    runs-on: ubuntu-latest
    environment: development
    needs: DOCKER_BUILD
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: download image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker
          path: /tmp
      - name: load image
        id: load-image
        run: |
          docker load --input /tmp/docker.tar > /tmp/image.txt  
          echo "IMAGE_NAME=`cat /tmp/image.txt | awk -F' '  '{print $3}'`" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}      
      - name: echo image name
        run: echo "${{ env.IMAGE_NAME }}"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_NAME }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
      