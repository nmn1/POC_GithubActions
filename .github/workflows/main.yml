name: GitHub Action Workflow
on: 
  push:
    branches: [ main, dev ]
    tags:
      - "v*.*.*"
env:

  AWS_REGION: us-east-1                   # set this to your preferred AWS region,
  ECS_SERVICE: gameAppService                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_DEV_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: gameApp  
  DOCKER_REPO: naman01/poc_git_actions

jobs:
  liniting:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Lint Action
        uses: wearerequired/lint-action@v2.3.0
      # - name: Super-Linter
      #   uses: github/super-linter@v4.10.1

  SAST:
    runs-on: ubuntu-latest
    steps:
    - name: sast steps
      run: echo "steps for sast"

  DOCKER_BUILD:
    runs-on: ubuntu-latest
    needs: [SAST, liniting ]
    outputs:
      MY_VERSION: ${{ steps.version.outputs.img_version }}
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: naman01/poc_git_actions
          flavor: latest=false
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Building Image
        id: image-push
        uses: docker/build-push-action@v4  
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ steps.meta.outputs.tags }}
          cache-to: type=inline
      
      - name: Output Image version
        id: version
        run: | 
          echo "img_version=$(echo ${{ steps.meta.outputs.version }})" >> $GITHUB_OUTPUT

          
      
  DEPLOYMENT-DEVELOPMENT-ECS:
    runs-on: ubuntu-latest
    if: github.ref_name == 'dev'
    environment: development
    needs: DOCKER_BUILD
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setting Image Name
        env:
          MY_IMG_VERSION: ${{needs.DOCKER_BUILD.outputs.MY_VERSION}} 
        run: |
          echo "MY_IMAGE=${{ env.DOCKER_REPO }}:$MY_IMG_VERSION" >> $GITHUB_ENV  
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}      
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          MY_IMG_VERSION: ${{needs.DOCKER_BUILD.outputs.MY_VERSION}} 
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.MY_IMAGE }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          
  DEPLOYMENT-PRODUCTION-ECS:
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    environment: production
    needs: DOCKER_BUILD
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setting Image Name
        env:
          MY_IMG_VERSION: ${{needs.DOCKER_BUILD.outputs.MY_VERSION}} 
        run: |
          echo "MY_IMAGE=${{ env.DOCKER_REPO }}:$MY_IMG_VERSION" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}      

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.MY_IMAGE }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true    
